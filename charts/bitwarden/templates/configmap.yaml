{{- $fullName := include "bitwarden.fullname" . -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $fullName }}-conf
  labels:
    app.kubernetes.io/name: {{ include "bitwarden.name" . }}
    helm.sh/chart: {{ include "bitwarden.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:
  {{- range $key, $val := .Values.bitwarden }}
  {{ $key | upper }}: {{ $val | quote }}
  {{- end}}
  ENABLE_DB_WAL: {{ .Values.database.wal | quote }}
  {{ if .Values.storage.enabled -}}
  DATA_FOLDER: {{ .Values.storage.path }}
  {{ end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $fullName }}-scripts
  labels:
    app.kubernetes.io/name: {{ include "bitwarden.name" . }}
    helm.sh/chart: {{ include "bitwarden.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:
  update-config.sh: >-
    #!/bin/sh

    CONFIG_FILE="${DATA_FOLDER}/config.json";

    if [ ! -f "${CONFIG_FILE}" ]; then
      echo "File \"${CONFIG_FILE}\" doesn't exist";
      exit;
    fi

    JSON_KEYS=$(cat "${CONFIG_FILE}" | sed -e 's/[{}]/''/g' | awk '{gsub("\"","");gsub(":",""); print $1}');

    for KEY in ${JSON_KEYS}; do
      VAR=$(echo "${KEY}" | tr '[a-z]' '[A-Z]');
      VALUE="$(eval "echo \"\$${VAR}\"")";

      if [ -n "${VALUE}" ]; then
        echo "${VAR}: ${VALUE}";

        sed -i "s|\"${KEY}\": \(true\|false\),|\"${KEY}\": ${VALUE},|g" "${CONFIG_FILE}";
        sed -i "s|\"${KEY}\": [0-9]*,|\"${KEY}\": ${VALUE},|g" "${CONFIG_FILE}";
        sed -i "s|\"${KEY}\": \"\(.*\)\",|\"${KEY}\": \"${VALUE}\",|g" "${CONFIG_FILE}";
      fi
    done
